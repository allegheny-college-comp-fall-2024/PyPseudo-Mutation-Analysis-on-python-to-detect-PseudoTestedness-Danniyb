{"created": 1731333456.8532538, "duration": 0.22724294662475586, "exitcode": 1, "root": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo", "environment": {}, "summary": {"failed": 6, "passed": 5, "total": 11, "collected": 11}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "results", "outcome": "passed", "result": []}, {"nodeid": "simplePro/test_calculator.py", "outcome": "passed", "result": [{"nodeid": "simplePro/test_calculator.py::test_add", "type": "Function", "lineno": 16}, {"nodeid": "simplePro/test_calculator.py::test_subtract", "type": "Function", "lineno": 25}, {"nodeid": "simplePro/test_calculator.py::test_multiply", "type": "Function", "lineno": 33}, {"nodeid": "simplePro/test_calculator.py::test_divide", "type": "Function", "lineno": 42}, {"nodeid": "simplePro/test_calculator.py::test_divide_by_zero", "type": "Function", "lineno": 54}, {"nodeid": "simplePro/test_calculator.py::test_modulus", "type": "Function", "lineno": 58}, {"nodeid": "simplePro/test_calculator.py::test_modulus_by_zero", "type": "Function", "lineno": 70}, {"nodeid": "simplePro/test_calculator.py::test_power", "type": "Function", "lineno": 74}, {"nodeid": "simplePro/test_calculator.py::test_square_root", "type": "Function", "lineno": 84}, {"nodeid": "simplePro/test_calculator.py::test_square_root_of_negative", "type": "Function", "lineno": 93}, {"nodeid": "simplePro/test_calculator.py::test_square_root_non_converging", "type": "Function", "lineno": 97}]}, {"nodeid": "simplePro", "outcome": "passed", "result": [{"nodeid": "simplePro/test_calculator.py", "type": "Module"}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "results", "type": "Dir"}, {"nodeid": "simplePro", "type": "Dir"}]}], "tests": [{"nodeid": "simplePro/test_calculator.py::test_add", "lineno": 16, "outcome": "failed", "keywords": ["test_add", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0012028749988530762, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0011828339993371628, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/test_calculator.py", "lineno": 18, "message": "assert None == 3\n +  where None = <bound method Calculator.add of <calculator.Calculator object at 0x1065ff0d0>>(1, 2)\n +    where <bound method Calculator.add of <calculator.Calculator object at 0x1065ff0d0>> = <calculator.Calculator object at 0x1065ff0d0>.add"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 18, "message": "AssertionError"}], "stdout": "XMT: Removing body of function add\n", "longrepr": "calculator = <calculator.Calculator object at 0x1065ff0d0>\n\n    def test_add(calculator):\n>       assert calculator.add(1, 2) == 3\nE       assert None == 3\nE        +  where None = <bound method Calculator.add of <calculator.Calculator object at 0x1065ff0d0>>(1, 2)\nE        +    where <bound method Calculator.add of <calculator.Calculator object at 0x1065ff0d0>> = <calculator.Calculator object at 0x1065ff0d0>.add\n\nsimplePro/test_calculator.py:18: AssertionError"}, "teardown": {"duration": 0.00065533300221432, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_subtract", "lineno": 25, "outcome": "failed", "keywords": ["test_subtract", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.000914542000828078, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0009045420010806993, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/test_calculator.py", "lineno": 27, "message": "assert None == 2\n +  where None = <bound method Calculator.subtract of <calculator.Calculator object at 0x106621b90>>(5, 3)\n +    where <bound method Calculator.subtract of <calculator.Calculator object at 0x106621b90>> = <calculator.Calculator object at 0x106621b90>.subtract"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 27, "message": "AssertionError"}], "stdout": "XMT: Removing body of function subtract\n", "longrepr": "calculator = <calculator.Calculator object at 0x106621b90>\n\n    def test_subtract(calculator):\n>       assert calculator.subtract(5, 3) == 2\nE       assert None == 2\nE        +  where None = <bound method Calculator.subtract of <calculator.Calculator object at 0x106621b90>>(5, 3)\nE        +    where <bound method Calculator.subtract of <calculator.Calculator object at 0x106621b90>> = <calculator.Calculator object at 0x106621b90>.subtract\n\nsimplePro/test_calculator.py:27: AssertionError"}, "teardown": {"duration": 0.0005910420004511252, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_multiply", "lineno": 33, "outcome": "failed", "keywords": ["test_multiply", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008803330019873101, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0009326670005975757, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/test_calculator.py", "lineno": 35, "message": "assert None == 9\n +  where None = <bound method Calculator.multiply of <calculator.Calculator object at 0x107804dd0>>(3, 3)\n +    where <bound method Calculator.multiply of <calculator.Calculator object at 0x107804dd0>> = <calculator.Calculator object at 0x107804dd0>.multiply"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 35, "message": "AssertionError"}], "stdout": "XMT: Removing body of function add\nXMT: Removing body of function add\nXMT: Removing body of function add\n", "longrepr": "calculator = <calculator.Calculator object at 0x107804dd0>\n\n    def test_multiply(calculator):\n>       assert calculator.multiply(3, 3) == 9\nE       assert None == 9\nE        +  where None = <bound method Calculator.multiply of <calculator.Calculator object at 0x107804dd0>>(3, 3)\nE        +    where <bound method Calculator.multiply of <calculator.Calculator object at 0x107804dd0>> = <calculator.Calculator object at 0x107804dd0>.multiply\n\nsimplePro/test_calculator.py:35: AssertionError"}, "teardown": {"duration": 0.0005294170005072374, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_divide", "lineno": 42, "outcome": "failed", "keywords": ["test_divide", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008972499999799766, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.000593374999880325, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/calculator.py", "lineno": 57, "message": "TypeError: '>=' not supported between instances of 'NoneType' and 'int'"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 44, "message": ""}, {"path": "simplePro/calculator.py", "lineno": 57, "message": "TypeError"}], "stdout": "XMT: Removing body of function subtract\nXMT: Removing body of function add\n", "longrepr": "calculator = <calculator.Calculator object at 0x1065ff350>\n\n    def test_divide(calculator):\n>       assert calculator.divide(10, 2) == 5\n\nsimplePro/test_calculator.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <calculator.Calculator object at 0x1065ff350>, a = 10, b = 2\n\n    def divide(self, a, b):\n        if self.plugin.is_mutant_enabled('sdl_if'):\n            print('SDL: Skipping if statement')\n            pass\n        elif b == 0:\n            raise ValueError('Cannot divide by zero')\n        abs_a = abs(a)\n        abs_b = abs(b)\n        quotient = 0\n>       while abs_a >= abs_b:\nE       TypeError: '>=' not supported between instances of 'NoneType' and 'int'\n\nsimplePro/calculator.py:57: TypeError"}, "teardown": {"duration": 0.0005464589994517155, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_divide_by_zero", "lineno": 54, "outcome": "passed", "keywords": ["test_divide_by_zero", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008203340003092308, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0010440830010338686, "outcome": "passed"}, "teardown": {"duration": 0.0004764160003105644, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_modulus", "lineno": 58, "outcome": "failed", "keywords": ["test_modulus", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008055830003286246, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0005398329994932283, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/calculator.py", "lineno": 75, "message": "TypeError: '>=' not supported between instances of 'NoneType' and 'int'"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 60, "message": ""}, {"path": "simplePro/calculator.py", "lineno": 75, "message": "TypeError"}], "stdout": "XMT: Removing body of function subtract\n", "longrepr": "calculator = <calculator.Calculator object at 0x107819410>\n\n    def test_modulus(calculator):\n>       assert calculator.modulus(10, 3) == 1\n\nsimplePro/test_calculator.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <calculator.Calculator object at 0x107819410>, a = 10, b = 3\n\n    def modulus(self, a, b):\n        if self.plugin.is_mutant_enabled('sdl_if'):\n            print('SDL: Skipping if statement')\n            pass\n        elif b == 0:\n            raise ValueError('Cannot divide by zero')\n        abs_a = abs(a)\n        abs_b = abs(b)\n>       while abs_a >= abs_b:\nE       TypeError: '>=' not supported between instances of 'NoneType' and 'int'\n\nsimplePro/calculator.py:75: TypeError"}, "teardown": {"duration": 0.0005501250016095582, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_modulus_by_zero", "lineno": 70, "outcome": "passed", "keywords": ["test_modulus_by_zero", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008335829988936894, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0005220000020926818, "outcome": "passed"}, "teardown": {"duration": 0.0004659590013034176, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_power", "lineno": 74, "outcome": "failed", "keywords": ["test_power", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0007775000012770761, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.000981999997748062, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/test_calculator.py", "lineno": 76, "message": "assert None == 8\n +  where None = <bound method Calculator.power of <calculator.Calculator object at 0x107836190>>(2, 3)\n +    where <bound method Calculator.power of <calculator.Calculator object at 0x107836190>> = <calculator.Calculator object at 0x107836190>.power"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 76, "message": "AssertionError"}], "stdout": "XMT: Removing body of function add\nXMT: Removing body of function add\nXMT: Removing body of function add\nXMT: Removing body of function add\nXMT: Removing body of function add\nXMT: Removing body of function add\n", "longrepr": "calculator = <calculator.Calculator object at 0x107836190>\n\n    def test_power(calculator):\n>       assert calculator.power(2, 3) == 8\nE       assert None == 8\nE        +  where None = <bound method Calculator.power of <calculator.Calculator object at 0x107836190>>(2, 3)\nE        +    where <bound method Calculator.power of <calculator.Calculator object at 0x107836190>> = <calculator.Calculator object at 0x107836190>.power\n\nsimplePro/test_calculator.py:76: AssertionError"}, "teardown": {"duration": 0.0005315829985192977, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_square_root", "lineno": 84, "outcome": "passed", "keywords": ["test_square_root", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008342909968632739, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0008377500016649719, "outcome": "passed"}, "teardown": {"duration": 0.00046083400229690596, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_square_root_of_negative", "lineno": 93, "outcome": "passed", "keywords": ["test_square_root_of_negative", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0007803749977028929, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0012529579980764538, "outcome": "passed"}, "teardown": {"duration": 0.00047629099935875274, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_square_root_non_converging", "lineno": 97, "outcome": "passed", "keywords": ["test_square_root_non_converging", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008201249984267633, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: xmt, Target: *\n"}, "call": {"duration": 0.0010094579993165098, "outcome": "passed"}, "teardown": {"duration": 0.0004849580000154674, "outcome": "passed"}}], "warnings": [{"message": "currentThread() is deprecated, use current_thread() instead", "category": "DeprecationWarning", "when": "config", "filename": "/Users/danielbekele/.pyenv/versions/3.11.7/lib/python3.11/site-packages/coverage/pytracer.py", "lineno": 223}]}
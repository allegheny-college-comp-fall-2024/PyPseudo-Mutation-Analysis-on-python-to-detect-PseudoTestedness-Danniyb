{"created": 1731005369.136481, "duration": 0.12834787368774414, "exitcode": 1, "root": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo", "environment": {}, "summary": {"passed": 8, "failed": 3, "total": 11, "collected": 11}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "results", "outcome": "passed", "result": []}, {"nodeid": "simplePro/test_calculator.py", "outcome": "passed", "result": [{"nodeid": "simplePro/test_calculator.py::test_add", "type": "Function", "lineno": 16}, {"nodeid": "simplePro/test_calculator.py::test_subtract", "type": "Function", "lineno": 25}, {"nodeid": "simplePro/test_calculator.py::test_multiply", "type": "Function", "lineno": 33}, {"nodeid": "simplePro/test_calculator.py::test_divide", "type": "Function", "lineno": 42}, {"nodeid": "simplePro/test_calculator.py::test_divide_by_zero", "type": "Function", "lineno": 54}, {"nodeid": "simplePro/test_calculator.py::test_modulus", "type": "Function", "lineno": 58}, {"nodeid": "simplePro/test_calculator.py::test_modulus_by_zero", "type": "Function", "lineno": 70}, {"nodeid": "simplePro/test_calculator.py::test_power", "type": "Function", "lineno": 74}, {"nodeid": "simplePro/test_calculator.py::test_square_root", "type": "Function", "lineno": 84}, {"nodeid": "simplePro/test_calculator.py::test_square_root_of_negative", "type": "Function", "lineno": 93}, {"nodeid": "simplePro/test_calculator.py::test_square_root_non_converging", "type": "Function", "lineno": 97}]}, {"nodeid": "simplePro", "outcome": "passed", "result": [{"nodeid": "simplePro/test_calculator.py", "type": "Module"}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "results", "type": "Dir"}, {"nodeid": "simplePro", "type": "Dir"}]}], "tests": [{"nodeid": "simplePro/test_calculator.py::test_add", "lineno": 16, "outcome": "passed", "keywords": ["test_add", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0008631249947939068, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0004108749999431893, "outcome": "passed"}, "teardown": {"duration": 0.0004235829983372241, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_subtract", "lineno": 25, "outcome": "passed", "keywords": ["test_subtract", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0007113750034477562, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0004234590014675632, "outcome": "passed"}, "teardown": {"duration": 0.00031237500661518425, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_multiply", "lineno": 33, "outcome": "failed", "keywords": ["test_multiply", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0005391669983509928, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0007885420054662973, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/test_calculator.py", "lineno": 35, "message": "assert 0 == 9\n +  where 0 = <bound method Calculator.multiply of <calculator.Calculator object at 0x104d9f210>>(3, 3)\n +    where <bound method Calculator.multiply of <calculator.Calculator object at 0x104d9f210>> = <calculator.Calculator object at 0x104d9f210>.multiply"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 35, "message": "AssertionError"}], "stdout": "SDL: Skipping for loop\n", "longrepr": "calculator = <calculator.Calculator object at 0x104d9f210>\n\n    def test_multiply(calculator):\n>       assert calculator.multiply(3, 3) == 9\nE       assert 0 == 9\nE        +  where 0 = <bound method Calculator.multiply of <calculator.Calculator object at 0x104d9f210>>(3, 3)\nE        +    where <bound method Calculator.multiply of <calculator.Calculator object at 0x104d9f210>> = <calculator.Calculator object at 0x104d9f210>.multiply\n\nsimplePro/test_calculator.py:35: AssertionError"}, "teardown": {"duration": 0.00045033400238025934, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_divide", "lineno": 42, "outcome": "passed", "keywords": ["test_divide", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0006917919963598251, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0007262919971253723, "outcome": "passed"}, "teardown": {"duration": 0.0003080409951508045, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_divide_by_zero", "lineno": 54, "outcome": "passed", "keywords": ["test_divide_by_zero", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0005177909915801138, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.000690582994138822, "outcome": "passed"}, "teardown": {"duration": 0.00035854200541507453, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_modulus", "lineno": 58, "outcome": "passed", "keywords": ["test_modulus", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0006425419996958226, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0005950839986326173, "outcome": "passed"}, "teardown": {"duration": 0.000340958999004215, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_modulus_by_zero", "lineno": 70, "outcome": "passed", "keywords": ["test_modulus_by_zero", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0005667499935952947, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.00035533300251699984, "outcome": "passed"}, "teardown": {"duration": 0.0003544999926816672, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_power", "lineno": 74, "outcome": "failed", "keywords": ["test_power", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0005996249965392053, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0005779169878223911, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/test_calculator.py", "lineno": 76, "message": "assert 1 == 8\n +  where 1 = <bound method Calculator.power of <calculator.Calculator object at 0x104dadb50>>(2, 3)\n +    where <bound method Calculator.power of <calculator.Calculator object at 0x104dadb50>> = <calculator.Calculator object at 0x104dadb50>.power"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 76, "message": "AssertionError"}], "stdout": "SDL: Skipping for loop\n", "longrepr": "calculator = <calculator.Calculator object at 0x104dadb50>\n\n    def test_power(calculator):\n>       assert calculator.power(2, 3) == 8\nE       assert 1 == 8\nE        +  where 1 = <bound method Calculator.power of <calculator.Calculator object at 0x104dadb50>>(2, 3)\nE        +    where <bound method Calculator.power of <calculator.Calculator object at 0x104dadb50>> = <calculator.Calculator object at 0x104dadb50>.power\n\nsimplePro/test_calculator.py:76: AssertionError"}, "teardown": {"duration": 0.0003734579950105399, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_square_root", "lineno": 84, "outcome": "failed", "keywords": ["test_square_root", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0005680000031134114, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0003900419978890568, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudo-Mutation-Analysis-on-python-to-detect-PseudoTestedness-Danniyb/PyPseudo/simplePro/calculator.py", "lineno": 138, "message": "ValueError: Failed to converge to a solution"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 86, "message": ""}, {"path": "simplePro/calculator.py", "lineno": 138, "message": "ValueError"}], "stdout": "SDL: Skipping for loop\n", "longrepr": "calculator = <calculator.Calculator object at 0x104de4ed0>\n\n    def test_square_root(calculator):\n>       assert abs(calculator.square_root(4) - 2) < 1e-9\n\nsimplePro/test_calculator.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <calculator.Calculator object at 0x104de4ed0>, a = 4, tolerance = 1e-10, max_iterations = 1000\n\n    def square_root(self, a, tolerance=1e-10, max_iterations=1000):\n        if self.plugin.is_mutant_enabled('sdl_if'):\n            print('SDL: Skipping if statement')\n            pass\n        elif a < 0:\n            raise ValueError('Cannot take the square root of a negative number'\n                )\n        if self.plugin.is_mutant_enabled('sdl_if'):\n            print('SDL: Skipping if statement')\n            pass\n        elif a == 0:\n            return 0\n        x = a\n        if self.plugin.is_mutant_enabled('sdl_for'):\n            print('SDL: Skipping for loop')\n            pass\n        elif self.plugin.is_mutant_enabled('sdl_for'):\n            print('SDL: Skipping for loop')\n            pass\n        else:\n            for _ in range(max_iterations):\n                root = 0.5 * (x + a / x)\n                if self.plugin.is_mutant_enabled('sdl_if'):\n                    print('SDL: Skipping if statement')\n                    pass\n                elif abs(root - x) < tolerance:\n                    return root\n                x = root\n>       raise ValueError('Failed to converge to a solution')\nE       ValueError: Failed to converge to a solution\n\nsimplePro/calculator.py:138: ValueError"}, "teardown": {"duration": 0.00035758400917984545, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_square_root_of_negative", "lineno": 93, "outcome": "passed", "keywords": ["test_square_root_of_negative", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0006556669977726415, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0008162079902831465, "outcome": "passed"}, "teardown": {"duration": 0.000299166000331752, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_square_root_non_converging", "lineno": 97, "outcome": "passed", "keywords": ["test_square_root_non_converging", "test_calculator.py", "simplePro", "PyPseudo", ""], "setup": {"duration": 0.0005395839980337769, "outcome": "passed", "stdout": "Mutations enabled.\nActive mutations:\n  - Type: sdl, Target: ['for']\n"}, "call": {"duration": 0.0007169580057961866, "outcome": "passed", "stdout": "SDL: Skipping for loop\n"}, "teardown": {"duration": 0.00031529100670013577, "outcome": "passed"}}], "warnings": [{"message": "currentThread() is deprecated, use current_thread() instead", "category": "DeprecationWarning", "when": "config", "filename": "/Users/danielbekele/.pyenv/versions/3.11.7/lib/python3.11/site-packages/coverage/pytracer.py", "lineno": 223}]}
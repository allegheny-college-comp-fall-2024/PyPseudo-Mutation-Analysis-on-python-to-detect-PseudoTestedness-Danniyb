{"created": 1726237004.503983, "duration": 0.1164851188659668, "exitcode": 1, "root": "/Users/danielbekele/senior/comp/PyPseudoTest", "environment": {}, "summary": {"failed": 5, "passed": 7, "total": 12, "collected": 12}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "simplePro/test_calculator.py", "outcome": "passed", "result": [{"nodeid": "simplePro/test_calculator.py::test_add[1-2-3]", "type": "Function", "lineno": 5}, {"nodeid": "simplePro/test_calculator.py::test_add[-1-1-0]", "type": "Function", "lineno": 5}, {"nodeid": "simplePro/test_calculator.py::test_add[100-50-150]", "type": "Function", "lineno": 5}, {"nodeid": "simplePro/test_calculator.py::test_subtract[5-3-2]", "type": "Function", "lineno": 13}, {"nodeid": "simplePro/test_calculator.py::test_subtract[10-5-5]", "type": "Function", "lineno": 13}, {"nodeid": "simplePro/test_calculator.py::test_subtract[0-0-0]", "type": "Function", "lineno": 13}, {"nodeid": "simplePro/test_calculator.py::test_multiply[3-3-9]", "type": "Function", "lineno": 21}, {"nodeid": "simplePro/test_calculator.py::test_multiply[2-5-10]", "type": "Function", "lineno": 21}, {"nodeid": "simplePro/test_calculator.py::test_multiply[10-0-0]", "type": "Function", "lineno": 21}, {"nodeid": "simplePro/test_calculator.py::test_divide[10-2-5]", "type": "Function", "lineno": 29}, {"nodeid": "simplePro/test_calculator.py::test_divide[9-3-3]", "type": "Function", "lineno": 29}, {"nodeid": "simplePro/test_calculator.py::test_divide[5-0-None]", "type": "Function", "lineno": 29}]}, {"nodeid": "simplePro", "outcome": "passed", "result": [{"nodeid": "simplePro/test_calculator.py", "type": "Module"}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "simplePro", "type": "Dir"}]}], "tests": [{"nodeid": "simplePro/test_calculator.py::test_add[1-2-3]", "lineno": 5, "outcome": "failed", "keywords": ["test_add[1-2-3]", "parametrize", "pytestmark", "1-2-3", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0008019160013645887, "outcome": "passed"}, "call": {"duration": 0.0008002910180948675, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudoTest/simplePro/test_calculator.py", "lineno": 12, "message": "assert 1 == 3\n +  where 1 = <function Calculator.add at 0x1045adda0>(1, 2)\n +    where <function Calculator.add at 0x1045adda0> = Calculator.add"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 12, "message": "AssertionError"}], "longrepr": "a = 1, b = 2, expected = 3\n\n    @pytest.mark.parametrize(\"a, b, expected\", [\n        (1, 2, 3),\n        (-1, 1, 0),\n        (100, 50, 150)\n    ])\n    def test_add(a, b, expected):\n>       assert Calculator.add(a, b) == expected\nE       assert 1 == 3\nE        +  where 1 = <function Calculator.add at 0x1045adda0>(1, 2)\nE        +    where <function Calculator.add at 0x1045adda0> = Calculator.add\n\nsimplePro/test_calculator.py:12: AssertionError"}, "teardown": {"duration": 0.0005293329886626452, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_add[-1-1-0]", "lineno": 5, "outcome": "failed", "keywords": ["test_add[-1-1-0]", "parametrize", "pytestmark", "-1-1-0", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0007008330139797181, "outcome": "passed"}, "call": {"duration": 0.0005813329771626741, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudoTest/simplePro/test_calculator.py", "lineno": 12, "message": "assert -1 == 0\n +  where -1 = <function Calculator.add at 0x1045adda0>(-1, 1)\n +    where <function Calculator.add at 0x1045adda0> = Calculator.add"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 12, "message": "AssertionError"}], "longrepr": "a = -1, b = 1, expected = 0\n\n    @pytest.mark.parametrize(\"a, b, expected\", [\n        (1, 2, 3),\n        (-1, 1, 0),\n        (100, 50, 150)\n    ])\n    def test_add(a, b, expected):\n>       assert Calculator.add(a, b) == expected\nE       assert -1 == 0\nE        +  where -1 = <function Calculator.add at 0x1045adda0>(-1, 1)\nE        +    where <function Calculator.add at 0x1045adda0> = Calculator.add\n\nsimplePro/test_calculator.py:12: AssertionError"}, "teardown": {"duration": 0.0003453750105109066, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_add[100-50-150]", "lineno": 5, "outcome": "failed", "keywords": ["test_add[100-50-150]", "parametrize", "pytestmark", "100-50-150", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0006020410219207406, "outcome": "passed"}, "call": {"duration": 0.0005967920005787164, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudoTest/simplePro/test_calculator.py", "lineno": 12, "message": "assert 100 == 150\n +  where 100 = <function Calculator.add at 0x1045adda0>(100, 50)\n +    where <function Calculator.add at 0x1045adda0> = Calculator.add"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 12, "message": "AssertionError"}], "longrepr": "a = 100, b = 50, expected = 150\n\n    @pytest.mark.parametrize(\"a, b, expected\", [\n        (1, 2, 3),\n        (-1, 1, 0),\n        (100, 50, 150)\n    ])\n    def test_add(a, b, expected):\n>       assert Calculator.add(a, b) == expected\nE       assert 100 == 150\nE        +  where 100 = <function Calculator.add at 0x1045adda0>(100, 50)\nE        +    where <function Calculator.add at 0x1045adda0> = Calculator.add\n\nsimplePro/test_calculator.py:12: AssertionError"}, "teardown": {"duration": 0.0003635419998317957, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_subtract[5-3-2]", "lineno": 13, "outcome": "failed", "keywords": ["test_subtract[5-3-2]", "parametrize", "pytestmark", "5-3-2", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0006065409979782999, "outcome": "passed"}, "call": {"duration": 0.0005486659938469529, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudoTest/simplePro/test_calculator.py", "lineno": 20, "message": "assert 8 == 2\n +  where 8 = <function Calculator.subtract at 0x1045ade40>(5, 3)\n +    where <function Calculator.subtract at 0x1045ade40> = Calculator.subtract"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 20, "message": "AssertionError"}], "longrepr": "a = 5, b = 3, expected = 2\n\n    @pytest.mark.parametrize(\"a, b, expected\", [\n        (5, 3, 2),\n        (10, 5, 5),\n        (0, 0, 0)\n    ])\n    def test_subtract(a, b, expected):\n>       assert Calculator.subtract(a, b) == expected\nE       assert 8 == 2\nE        +  where 8 = <function Calculator.subtract at 0x1045ade40>(5, 3)\nE        +    where <function Calculator.subtract at 0x1045ade40> = Calculator.subtract\n\nsimplePro/test_calculator.py:20: AssertionError"}, "teardown": {"duration": 0.00036195898428559303, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_subtract[10-5-5]", "lineno": 13, "outcome": "failed", "keywords": ["test_subtract[10-5-5]", "parametrize", "pytestmark", "10-5-5", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0006339579995255917, "outcome": "passed"}, "call": {"duration": 0.0005500830011442304, "outcome": "failed", "crash": {"path": "/Users/danielbekele/senior/comp/PyPseudoTest/simplePro/test_calculator.py", "lineno": 20, "message": "assert 15 == 5\n +  where 15 = <function Calculator.subtract at 0x1045ade40>(10, 5)\n +    where <function Calculator.subtract at 0x1045ade40> = Calculator.subtract"}, "traceback": [{"path": "simplePro/test_calculator.py", "lineno": 20, "message": "AssertionError"}], "longrepr": "a = 10, b = 5, expected = 5\n\n    @pytest.mark.parametrize(\"a, b, expected\", [\n        (5, 3, 2),\n        (10, 5, 5),\n        (0, 0, 0)\n    ])\n    def test_subtract(a, b, expected):\n>       assert Calculator.subtract(a, b) == expected\nE       assert 15 == 5\nE        +  where 15 = <function Calculator.subtract at 0x1045ade40>(10, 5)\nE        +    where <function Calculator.subtract at 0x1045ade40> = Calculator.subtract\n\nsimplePro/test_calculator.py:20: AssertionError"}, "teardown": {"duration": 0.0004027090035378933, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_subtract[0-0-0]", "lineno": 13, "outcome": "passed", "keywords": ["test_subtract[0-0-0]", "parametrize", "pytestmark", "0-0-0", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0006302499969024211, "outcome": "passed"}, "call": {"duration": 0.0003280829987488687, "outcome": "passed"}, "teardown": {"duration": 0.000307999987853691, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_multiply[3-3-9]", "lineno": 21, "outcome": "passed", "keywords": ["test_multiply[3-3-9]", "parametrize", "pytestmark", "3-3-9", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0005774579767603427, "outcome": "passed"}, "call": {"duration": 0.0003325840225443244, "outcome": "passed"}, "teardown": {"duration": 0.00034004199551418424, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_multiply[2-5-10]", "lineno": 21, "outcome": "passed", "keywords": ["test_multiply[2-5-10]", "parametrize", "pytestmark", "2-5-10", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0005991670186631382, "outcome": "passed"}, "call": {"duration": 0.00033275000168941915, "outcome": "passed"}, "teardown": {"duration": 0.000339542020810768, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_multiply[10-0-0]", "lineno": 21, "outcome": "passed", "keywords": ["test_multiply[10-0-0]", "parametrize", "pytestmark", "10-0-0", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0007069589919410646, "outcome": "passed"}, "call": {"duration": 0.0003334580105729401, "outcome": "passed"}, "teardown": {"duration": 0.00032049999572336674, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_divide[10-2-5]", "lineno": 29, "outcome": "passed", "keywords": ["test_divide[10-2-5]", "parametrize", "pytestmark", "10-2-5", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0006068329967092723, "outcome": "passed"}, "call": {"duration": 0.0003206669935025275, "outcome": "passed"}, "teardown": {"duration": 0.00032020799699239433, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_divide[9-3-3]", "lineno": 29, "outcome": "passed", "keywords": ["test_divide[9-3-3]", "parametrize", "pytestmark", "9-3-3", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0005749590054620057, "outcome": "passed"}, "call": {"duration": 0.0003292500041425228, "outcome": "passed"}, "teardown": {"duration": 0.0003066670033149421, "outcome": "passed"}}, {"nodeid": "simplePro/test_calculator.py::test_divide[5-0-None]", "lineno": 29, "outcome": "passed", "keywords": ["test_divide[5-0-None]", "parametrize", "pytestmark", "5-0-None", "test_calculator.py", "simplePro", "PyPseudoTest", ""], "setup": {"duration": 0.0005887919978704304, "outcome": "passed"}, "call": {"duration": 0.00034204102121293545, "outcome": "passed"}, "teardown": {"duration": 0.0003483749751467258, "outcome": "passed"}}], "warnings": [{"message": "currentThread() is deprecated, use current_thread() instead", "category": "DeprecationWarning", "when": "config", "filename": "/Users/danielbekele/.pyenv/versions/3.11.7/lib/python3.11/site-packages/coverage/pytracer.py", "lineno": 223}, {"message": "Unknown config option: json_report_file\n", "category": "PytestConfigWarning", "when": "config", "filename": "/Users/danielbekele/.pyenv/versions/3.11.7/lib/python3.11/site-packages/_pytest/config/__init__.py", "lineno": 1448}]}